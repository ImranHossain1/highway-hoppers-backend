// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SUPERADMIN
  TRAVELLER
  DRIVER
}

enum WeekDays {
  Saturday
  Sunday
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
}

enum Bus_Schedule_Status {
  Upcoming
  Ongoing
  Arrived
}

enum BookingStatus {
  Pending
  Booked
  Completed
  Cancelled
}

enum PaymentStatus {
  Pending
  Completed
}

enum Gender {
  OPTIONAL
  MALE
  FEMALE
}

enum BusType {
  AC
  Non_AC
}

model User {
  id              String   @id @default(uuid())
  name            String
  email           String   @unique
  password        String
  DOB             String   @default("mm/dd/yyy")
  gender          Gender   @default(OPTIONAL)
  role            Role     @default(TRAVELLER)
  contactNo       String   @default("not given")
  address         String   @default("not given")
  isAllFieldGiven Boolean  @default(false)
  profileImg      String   @default("https://t4.ftcdn.net/jpg/02/29/75/83/360_F_229758328_7x8jwCwjtBMmC6rgFzLFhZoEpLobB6L8.jpg")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  reviews  Review[]
  faqs     Faq[]
  bookings Booking[]
  driver   Driver?

  @@map("users")
}

model Faq {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  questions String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

model Bus {
  id            String         @id @default(uuid())
  busType       BusType?       @default(Non_AC)
  busNumber     String         @unique
  totalSit      Int?           @default(40)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  bus_Schedules Bus_Schedule[]
  bus_Sits      Bus_Sit[]

  @@map("buses")
}

model Bus_Sit {
  id        String       @id @default(uuid())
  sitNumber BusSitNumber
  busId     String
  bus       Bus          @relation(fields: [busId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  bookings  Booking[]

  @@map("bus_sit")
}

model Bus_Schedule {
  id            String               @id @default(uuid())
  startTime     String
  endTime       String
  startDate     String
  endDate       String
  startingPoint String
  endPoint      String
  dayOfWeek     WeekDays
  bookedSit     Int?                 @default(0)
  PendingSit    Int?                 @default(0)
  busFare       Float
  status        Bus_Schedule_Status? @default(Upcoming)
  busId         String
  bus           Bus                  @relation(fields: [busId], references: [id])
  driverId      String
  driver        Driver               @relation(fields: [driverId], references: [id])
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  signle_Trip_Income Signle_Trip_Income?
  bookings           Booking[]

  @@map("busSchedules")
}

model Booking {
  id String @id @default(uuid())

  userId        String
  user          User         @relation(fields: [userId], references: [id])
  busScheduleId String
  bus_Schedule  Bus_Schedule @relation(fields: [busScheduleId], references: [id])

  bookingStatus BookingStatus? @default(Pending)
  paymentStatus PaymentStatus? @default(Pending)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  review        Review?
  Bus_Sit       Bus_Sit        @relation(fields: [bus_SitId], references: [id])
  bus_SitId     String

  @@map("bookings")
}

model Signle_Trip_Income {
  id            String       @id @default(uuid())
  busScheduleId String       @unique
  bus_Schedule  Bus_Schedule @relation(fields: [busScheduleId], references: [id])
  earnings      Float        @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("singleTripIncomes")
}

model Review {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  bookingId String  @unique
  booking   Booking @relation(fields: [bookingId], references: [id])
  review    String
  rating    Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Driver {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  salary        Float          @default(15000)
  rating        Float          @default(0)
  userId        String         @unique
  totalReviewer Int            @default(0)
  totalRatings  Float          @default(0)
  user          User           @relation(fields: [userId], references: [id])
  bus_Schedules Bus_Schedule[]

  @@map("drivers")
}

enum BusSitNumber {
  A1
  A2
  A3
  A4
  B1
  B2
  B3
  B4
  C1
  C2
  C3
  C4
  D1
  D2
  D3
  D4
  E1
  E2
  E3
  E4
  F1
  F2
  F3
  F4
  G1
  G2
  G3
  G4
  H1
  H2
  H3
  H4
  I1
  I2
  I3
  I4
  J1
  J2
  J3
  J4
}
